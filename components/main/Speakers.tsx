"use client";

import { useState } from "react";
import SpeakerCard from "@/components/additional/SpeakerCard";
import SpeakerModal from "@/components/additional/SpeakerModal";

const speakers = [
  {
    id: 1,
    name: "–û–ª–µ–Ω–∞ –ö–æ–≤–∞–ª—å—á—É–∫",
    position: "–°–ï–û",
    company: "TechNova",
    photo: "/images/speaker1.jpg",
    topic: "–Ø–∫ –ø–æ–±—É–¥—É–≤–∞—Ç–∏ —Å–∏–ª—å–Ω—É –∫–æ–º–∞–Ω–¥—É –≤ –Ü–¢-–∫–æ–º–ø–∞–Ω—ñ—ó",
    bio: "–û–ª–µ–Ω–∞ –º–∞—î –ø–æ–Ω–∞–¥ 10 —Ä–æ–∫—ñ–≤ –¥–æ—Å–≤—ñ–¥—É —É —Å—Ñ–µ—Ä—ñ —É–ø—Ä–∞–≤–ª—ñ–Ω–Ω—è —Å—Ç–∞—Ä—Ç–∞–ø–∞–º–∏. –á—ó –≤–∏—Å—Ç—É–ø –ø—Ä–∏—Å–≤—è—á–µ–Ω–∏–π –∫—É–ª—å—Ç—É—Ä—ñ –∫–æ–º–∞–Ω–¥–Ω–æ—ó —Ä–æ–±–æ—Ç–∏ —Ç–∞ –µ—Ñ–µ–∫—Ç–∏–≤–Ω–æ–º—É –ª—ñ–¥–µ—Ä—Å—Ç–≤—É.",
  },
  {
    id: 2,
    name: "–Ü–≥–æ—Ä –ú–µ–ª—å–Ω–∏–∫",
    position: "Product Manager",
    company: "FinEdge",
    photo: "/images/speaker2.jpg",
    topic: "–°—Ç–≤–æ—Ä–µ–Ω–Ω—è –ø—Ä–æ–¥—É–∫—Ç—ñ–≤, —è–∫—ñ –ª—é–±–ª—è—Ç—å –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á—ñ",
    bio: "–Ü–≥–æ—Ä –ø–æ–¥—ñ–ª–∏—Ç—å—Å—è –ø—Ä–∞–∫—Ç–∏–∫–∞–º–∏ –ø—Ä–æ–¥—É–∫—Ç–æ–≤–æ–≥–æ –º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç—É, –ø–æ–±—É–¥–æ–≤–∏ —Ü—ñ–Ω–Ω–æ—Å—Ç—ñ —Ç–∞ –∞–Ω–∞–ª—ñ–∑—É –∫–æ—Ä–∏—Å—Ç—É–≤–∞—Ü—å–∫–∏—Ö –¥–∞–Ω–∏—Ö.",
  },
];

export default function SpeakersPage() {
  const [selectedSpeaker, setSelectedSpeaker] = useState<{
    id: number;
    name: string;
    position: string;
    company: string;
    photo: string;
    topic: string;
    bio: string;
  } | null>(null);

  return (
    <section className="min-h-screen py-20 px-6 ">
      <div className="max-w-6xl mx-auto text-center">
        <h1 className="text-5xl font-extrabold mb-14 uppercase tracking-tight text-gray-900 relative">
          üéôÔ∏è –ù–∞—à—ñ —Å–ø—ñ–∫–µ—Ä–∏
          <span className="block w-20 h-1 bg-green-700 mx-auto mt-4 rounded-full"></span>
        </h1>

        <div className="grid md:grid-cols-2 gap-10">
          {speakers.map((speaker, index) => (
            <div
              key={speaker.id}
              className="animate-fade-in-slow"
              style={{ animationDelay: `${index * 0.15}s` }}
            >
              <SpeakerCard
                speaker={speaker}
                onMore={() => setSelectedSpeaker(speaker)}
              />
            </div>
          ))}
        </div>
      </div>

      {/* Modal */}
      {selectedSpeaker && (
        <SpeakerModal
          speaker={selectedSpeaker}
          onClose={() => setSelectedSpeaker(null)}
        />
      )}
    </section>
  );
}
